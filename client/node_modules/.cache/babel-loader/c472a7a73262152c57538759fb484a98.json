{"ast":null,"code":"var _jsxFileName = \"/workspace/spring-petclinic/client/src/components/MoviesList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_MOVIES_LIST = gql`\n  query getAllMovies {\n    movies {\n      id\n      name\n      yearOfPublication\n    }\n  }\n`;\n\nfunction MoviesList() {\n  _s();\n\n  var _data$movies;\n\n  const {\n    data,\n    loading\n  } = useQuery(GET_MOVIES_LIST);\n  console.log(data);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Data is loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Movies List \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), data === null || data === void 0 ? void 0 : (_data$movies = data.movies) === null || _data$movies === void 0 ? void 0 : _data$movies.map(_ref => {\n      let {\n        id,\n        name,\n        yearOfPublication\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Name: \", name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Year Of Publication: \", yearOfPublication]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MoviesList, \"uHu6+Av6iz/Cemw652GCrFuaHvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = MoviesList;\nexport default MoviesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesList\");","map":{"version":3,"sources":["/workspace/spring-petclinic/client/src/components/MoviesList.js"],"names":["React","useQuery","gql","GET_MOVIES_LIST","MoviesList","data","loading","console","log","movies","map","id","name","yearOfPublication"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;;AAEA,MAAMC,eAAe,GAAGD,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;;AAUA,SAASE,UAAT,GAAsB;AAAA;;AAAA;;AACpB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBL,QAAQ,CAACE,eAAD,CAAlC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,MAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGD,IAFH,aAEGA,IAFH,uCAEGA,IAAI,CAAEI,MAFT,iDAEG,aAAcC,GAAd,CAAkB,QAAqC;AAAA,UAApC;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,IAAN;AAAYC,QAAAA;AAAZ,OAAoC;AACtD,0BACE;AAAA,gCACE;AAAA,+BAAWD,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,8CAAyBC,iBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAUF,EAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAMD,KAPA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAjBQP,U;UACmBH,Q;;;KADnBG,U;AAmBT,eAAeA,UAAf","sourcesContent":["import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\n\nconst GET_MOVIES_LIST = gql`\n  query getAllMovies {\n    movies {\n      id\n      name\n      yearOfPublication\n    }\n  }\n`;\n\nfunction MoviesList() {\n  const { data, loading } = useQuery(GET_MOVIES_LIST);\n  console.log(data);\n  if (loading) return <h1>Data is loading</h1>;\n  return (\n    <div>\n      <h1> Movies List </h1>\n      {data?.movies?.map(({ id, name, yearOfPublication }) => {\n        return (\n          <div key={id}>\n            <h1>Name: {name}</h1>\n            <p>Year Of Publication: {yearOfPublication}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default MoviesList;\n"]},"metadata":{},"sourceType":"module"}